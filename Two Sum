Method-1: Brute Force Approach
 vector<int> twoSum(vector<int>& nums, int target) {
       vector<int>ans;
        for(int i=0; i<nums.size(); i++){
            for(int j=i+1; j<nums.size(); j++){
                if(nums[i]+nums[j]==target){
                    ans.push_back(i);
                    ans.push_back(j);
                }
            }
        }
        
      return ans;
    }

Method-2: Optimal Approach
 vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        unordered_map<int, int>mp;
       vector<int>ans;

        for(int i=0;i<n;i++){
            int rem = target - nums[i];
            if(mp.find(rem) != mp.end()){
               ans.push_back(i);
               ans.push_back(mp[rem]);
             break;
       }
            mp[nums[i]] = i;
        }
        return  ans;      
    }
